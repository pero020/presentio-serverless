service: presentio-serverless
frameworkVersion: "3"

provider:
  name: aws
  runtime: nodejs20.x
  stage: dev
  region: eu-central-1
  httpApi:
    cors: true
  environment:
    DYNAMODB_CUSTOMER_TABLE: ${self:service}-customerTable-${sls:stage}
    AWS_ACCOUNT_ID: ${aws:accountId}
    AWS_SERVICE_REGION: ${aws:region}
    PRESENTER_QUEUE: ${self:resources.Resources.notifyPresenterQueue.Properties.QueueName}
  iam:
    role:
      statements:
        - Effect: "Allow"
          Action:
            - "dynamodb:PutItem"
            - "dynamodb:Get*"
            - "dynamodb:GetItem"
            - "dynamodb:UpdateItem"
            - "dynamodb:DeleteItem"
          Resource: arn:aws:dynamodb:${aws:region}:${aws:accountId}:table/${self:service}-customerTable-${sls:stage}
        - Effect: "Allow"
          Action:
            - sqs:SendMessage
          Resource:
            Fn::GetAtt:
              - notifyPresenterQueue
              - Arn

functions:
  status:
    handler: index.handler
  createNewPresentation:
    handler: createNewPresentation.handler
    events:
      - httpApi:
          path: /createNewPresentation
          method: post
  getPresentation:
    handler: getPresentation.handler
    events:
      - httpApi:
          path: /getPresentation
          method: post
  enterPresentation:
    handler: enterPresentation.handler
    events:
      - websocket:
          route: enterPresentation
  endPresentation:
    handler: endPresentation.handler
    events:
      - websocket:
          route: endPresentation
  enterPresentationAsPresenter:
    handler: enterPresentationAsPresenter.handler
    events:
      - websocket:
          route: enterPresentationAsPresenter
  sendTopicIssue:
    handler: sendTopicIssue.handler
    events:
      - websocket:
          route: sendTopicIssue
  sendLostIssue:
    handler: sendLostIssue.handler
    events:
      - websocket:
          route: sendLostIssue
  resolveTopicIssue:
    handler: resolveTopicIssue.handler
    events:
      - websocket:
          route: resolveTopicIssue
  resolveLostIssue:
    handler: resolveLostIssue.handler
    events:
      - websocket:
          route: resolveLostIssue
  confirmLostIssue:
    handler: confirmLostIssue.handler
    events:
      - websocket:
          route: confirmLostIssue
  checkNeedNotify:
    handler: checkNeedNotify.handler
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - notifyPresenterQueue
              - Arn

resources:
  Resources:
    CustomerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: Id
            AttributeType: S
        BillingMode: PAY_PER_REQUEST
        KeySchema:
          - AttributeName: Id
            KeyType: HASH
        TableName: ${self:service}-customerTable-${sls:stage}
    notifyPresenterQueue:
      Type: "AWS::SQS::Queue"
      Properties:
        QueueName: "notifyPresenterQueue"
